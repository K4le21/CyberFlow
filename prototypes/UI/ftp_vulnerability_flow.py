#!/usr/bin/env python3
import json
import sys

def check_vulnerability(ip, port):
    # Placeholder for actual vulnerability checks.  Replace with real logic!
    if port == 21: #Example of vsftpd Backdoor vulnerability present due to open port 21 (ftp)
        return {
            "vulnerable": True,
            "details": "vsftpd Backdoor vulnerability is present due to open port 21(ftp)"
        }
    return {"vulnerable": False, "details": "No vulnerability detected"} #return {"vulnerable": False, "details": "No vulnerability detected"}

def scan_vulnerabilities(scan_results):
    try:
        scan_results = json.loads(scan_results)  # Parse JSON here!
    except (json.JSONDecodeError, TypeError) as e:
        print(f"Error decoding JSON: {e}")
        return []  # Return an empty list in case of parsing failure


    vulnerabilities = []
    for result in scan_results:
        ip = result['ip']
        for port, status in result['ports'].items():
            if status == 'open':
                vuln_info = check_vulnerability(ip, int(port)) #port needs to be converted to int
                if vuln_info["vulnerable"]:
                    vulnerability = {
                        "ip": ip,
                        "port": port,
                        "vulnerability": vuln_info["details"]
                    }
                    vulnerabilities.append(vulnerability)
    return vulnerabilities

if __name__ == "__main__":
    try:
        input_data = json.loads(sys.argv[1])
        scan_results = input_data.get('scan_results', '[]') # Default to empty JSON list
        vulnerabilities = scan_vulnerabilities(scan_results)

        if vulnerabilities:
            print(json.dumps({
                "status": "success",
                "message": "Vulnerabilities found!",
                "vulnerabilities": vulnerabilities
            }))
        else:
            print(json.dumps({
                "status": "success",
                "message": "No vulnerabilities found.",
                "vulnerabilities": []
            }))
    except Exception as e:
        print(json.dumps({
            "status": "error",
            "message": f"Error processing input: {e}",
            "vulnerabilities": []
        }))
